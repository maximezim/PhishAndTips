import threading
import time
import uuid
import json
import subprocess
import os

from app.database import SessionLocal
from app.models import SpiderfootScan

# A simple in-memory queue
scan_queue = []

def run_spiderfoot_scan(scan_id: uuid.UUID, target: str, modules: str):
    output_file = f"/tmp/{scan_id}"
    
    # Construct the command with correct flags
    cmd = [
        "python3",
        "/opt/spiderfoot/sfcli.py",
        "-u", target,         # Short flag for target
        # "-m", modules,        # Short flag for modules
        "-o", output_file     # Short flag for output file
    ]
    
    # Run the SpiderFoot CLI command
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    if result.returncode != 0:
        # Handle errors from the subprocess
        result_data = {
            "error": f"SpiderFoot CLI error: {result.stderr.strip()}"
        }
    else:
        # Read the output file
        if os.path.exists(output_file):
            with open(output_file, 'r') as f:
                # try:
                #     result_data = json.load(f)
                # except json.JSONDecodeError:
                #     result_data = {"error": "Failed to parse JSON output from SpiderFoot."}
                result_data = f.read()
            os.remove(output_file)
        else:
            result_data = {"error": "No output file generated by SpiderFoot."}

    # Update the database with the results
    db = SessionLocal()
    scan = db.query(SpiderfootScan).filter(SpiderfootScan.id == scan_id).first()
    if scan:
        scan.status = "completed"
        scan.result = result_data
        db.commit()
    db.close()

def queue_worker():
    while True:
        if scan_queue:
            db = SessionLocal()
            scan_info = scan_queue.pop(0)
            scan_id, target, modules = scan_info["id"], scan_info["target"], scan_info["modules"]
            
            # Update scan status to 'running'
            scan = db.query(SpiderfootScan).filter(SpiderfootScan.id == scan_id).first()
            if scan:
                scan.status = "running"
                db.commit()
            db.close()
            
            # Execute the scan
            run_spiderfoot_scan(scan_id, target, modules)
        else:
            time.sleep(2)

# Start the worker thread
worker_thread = threading.Thread(target=queue_worker, daemon=True)
worker_thread.start()
