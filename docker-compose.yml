services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: authentication_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/authentication/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/authentication_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=authentication_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: host.docker.internal:24224

  authentication-service:
    image: authentication-service:latest
    build:
      context: ./authentication
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/authentication_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_MAIL_HOST=mailserver
      - SPRING_MAIL_PORT=25
      - SPRING_MAIL_USERNAME=${AUTH_MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${AUTH_MAIL_PASSWORD}
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=false
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=false
      - MAIL_FROM=sender@example.com
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: host.docker.internal:24224

  api-gateway:
    image: api-gateway:latest
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - backend
    depends_on:
      - authentication-service
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: host.docker.internal:24224

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    networks:
      - backend

  fluent-bit:
    image: grafana/fluent-bit-plugin-loki:latest
    environment:
      LOG_LEVEL: warn
      LOKI_URL: http://loki:3100/loki/api/v1/push
    volumes:
      - ./fluent-bit/conf/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    networks:
      - backend

  renderer:
    image: grafana/grafana-image-renderer:latest
    expose:
      - "8081"
    environment:
      ENABLE_METRICS: "true"
    networks:
      - backend

  mailserver:
    image: docker.io/mailserver/docker-mailserver:latest
    container_name: mailserver
    hostname: mail
    domainname: example.com
    env_file: mailserver.env
    environment:
      - PERMIT_RELOAD=1
    volumes:
      - maildata:/var/mail
      - mailstate:/var/mail-state
      - maillogs:/var/log/mail
      - ./config/:/tmp/docker-mailserver/
    ports:
      - "25:25"     # SMTP
      - "143:143"   # IMAP
      - "587:587"   # Submission
      - "993:993"   # IMAPS
    restart: unless-stopped
    networks:
      - backend

  webmail:
    image: roundcube/roundcubemail:latest
    container_name: webmail
    environment:
      - ROUNDCUBEMAIL_DEFAULT_HOST=mailserver
      - ROUNDCUBEMAIL_DEFAULT_PORT=143
      - ROUNDCUBEMAIL_SMTP_SERVER=mailserver
      - ROUNDCUBEMAIL_SMTP_PORT=587
      - ROUNDCUBEMAIL_DEFAULT_USE_TLS=false
      - ROUNDCUBEMAIL_DEFAULT_USE_SSL=false
      - ROUNDCUBEMAIL_SMTP_USER=%u
      - ROUNDCUBEMAIL_SMTP_PASS=%p
    ports:
      - "8070:80"
    depends_on:
      - mailserver
    restart: unless-stopped
    volumes:
      - webmail_data:/var/www/html
      - ./roundcube/config/config.inc.php:/var/www/html/config/config.inc.php
    networks:
      - backend

  gophish:
    image: gophish/gophish:latest
    container_name: gophish
    volumes:
      - gophish-data:/opt/gophish
      - ./gophish/config.json:/opt/gophish/config.json
    ports:
      - "3333:3333"
      - "80:80"
    depends_on:
      - mailserver
    restart: unless-stopped

  postgres-formation:
    image: postgres:latest
    environment:
      POSTGRES_DB: formation_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - backend
    volumes:
      - ./databases/formation/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/formation_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=formation_db --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: host.docker.internal:24224


  formation-service:
    image: formation-service:latest
    build:
      context: ./formation
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      postgres-formation:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-formation:5432/formation_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
    volumes:
      - ./formation/data:/var/formation/data
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: host.docker.internal:24224

  spiderfoot:
    image: spiderfoot:latest
    ports:
      - "5001:5001"
    networks:
      - backend
  
  spiderfoot-api:
    build:
      context: ./spiderfoot-api
      dockerfile: Dockerfile
    image: spiderfoot-api:latest
    ports:
      - "8000:8000"
    networks:
      - backend
    depends_on:
      - postgres
      # - spiderfoot
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: authentication_db
      POSTGRES_HOST: postgres
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: host.docker.internal:24224

        
networks:
  backend:
    driver: bridge

volumes:
  maildata:
  mailstate:
  maillogs:
  webmail_data:
  gophish-data: