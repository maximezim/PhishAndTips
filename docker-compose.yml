services:
  nginx:
    container_name: nginx
    image: nginx:1-alpine
    ports:
      - "80:80"
    volumes:
      # - ./nginx/http.conf:/etc/nginx/templates/default.conf.template
      - ./nginx/dev.conf:/etc/nginx/templates/default.conf.template
      - ./nginx/certs:/root/ssl:ro
    env_file:
      - .env
    environment:
      MAX_BODY_SIZE: ${MAX_UPLOAD_SIZE_MB:-500}
    depends_on:
      - api-gateway
      # - frontend
    networks:
      - backend
    profiles:
      - prod
      - dev

  postgres:
    container_name: postgres
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_DB: authentication_db
      POSTGRES_USER: ${AUTH_PG_USER}
      POSTGRES_PASSWORD: ${AUTH_PG_PASSWORD}
    networks:
      - backend
    volumes:
      - ./volumes/authentication-db/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/authentication_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready --dbname=authentication_db --username=${AUTH_PG_USER}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - prod
      - dev

  authentication-service:
    container_name: authentication-service
    image: authentication-service:latest
    build:
      context: ./authentication
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/authentication_db
      - SPRING_DATASOURCE_USERNAME=${AUTH_PG_USER}
      - SPRING_DATASOURCE_PASSWORD=${AUTH_PG_PASSWORD}
      - SPRING_MAIL_HOST=${SMTP_HOST:-mailserver}
      - SPRING_MAIL_PORT=${SMTP_PORT:-25}
      - SPRING_MAIL_USERNAME=${SMTP_MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${SMTP_MAIL_PASSWORD}
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=true
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=${SMTP_ENABLE_TLS:-false}
      - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_REQUIRED=${SMTP_ENABLE_TLS:-false}
      - MAIL_FROM=${SMTP_FROM:-sender@example.com}
      - DEFAULT_ADMIN_EMAIL=${DEFAULT_ADMIN_EMAIL:-admin@example.com}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-password}
    volumes:
      - ./authentication/templates:/var/authentication/templates
    profiles:
      - prod
      - dev

  api-gateway:
    container_name: api-gateway
    image: api-gateway:latest
    build:
      context: ./gateway
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      - authentication-service
    profiles:
      - prod
      - dev

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DOZZLE_ADDR=:3001
      - DOZZLE_NO_ANALYTICS=true
      - DOZZLE_BASE=/monitor
      - DOZZLE_HOSTNAME=Phish&Tips
      - DOZZLE_ENABLE_ACTIONS=true
    networks:
      - backend
    profiles:
      - prod
      - dev

  mailserver:
    image: docker.io/mailserver/docker-mailserver:latest
    container_name: mailserver
    hostname: mail
    domainname: example.com
    env_file: mailserver.env
    environment:
      - PERMIT_RELOAD=1
    volumes:
      - maildata:/var/mail
      - mailstate:/var/mail-state
      - maillogs:/var/log/mail
      - ./config/:/tmp/docker-mailserver/
    restart: unless-stopped
    networks:
      - backend
    profiles:
      - dev
      - smtp

  webmail:
    image: roundcube/roundcubemail:latest
    container_name: webmail
    environment:
      - ROUNDCUBEMAIL_DEFAULT_HOST=mailserver
      - ROUNDCUBEMAIL_DEFAULT_PORT=143
      - ROUNDCUBEMAIL_SMTP_SERVER=mailserver
      - ROUNDCUBEMAIL_SMTP_PORT=587
      - ROUNDCUBEMAIL_DEFAULT_USE_TLS=false
      - ROUNDCUBEMAIL_DEFAULT_USE_SSL=false
      - ROUNDCUBEMAIL_SMTP_USER=%u
      - ROUNDCUBEMAIL_SMTP_PASS=%p
      - ROUNDCUBE_REQUEST_PATH=/mail/
    depends_on:
      - mailserver
    restart: unless-stopped
    volumes:
      - ./volumes/webmail:/var/www/html
      - ./roundcube/config/config.inc.php:/var/www/html/config/config.inc.php
    networks:
      - backend
    profiles:
      - dev
      - smtp

  gophish:
    container_name: gophish
    image: gophish/gophish:latest
    user: "0"
    volumes:
      - ./volumes/gophish/data:/opt/gophish/data
      - ./gophish/config.json:/opt/gophish/config.json
      - ./gophish/landing-pages:/opt/gophish/static/endpoint
      - ./gophish/entrypoint.sh:/entrypoint.sh
    env_file:
      - .env
    environment:
      - GOPHISH_INITIAL_ADMIN_API_TOKEN=${GOPHISH_API_KEY}
    entrypoint: ["/bin/bash", "/entrypoint.sh"]
    restart: unless-stopped
    networks:
      - backend
    profiles:
      - prod
      - dev

  postgres-formation:
    container_name: postgres-formation
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_DB: formation_db
      POSTGRES_USER: ${FORMATION_PG_USER}
      POSTGRES_PASSWORD: ${FORMATION_PG_PASSWORD}
    networks:
      - backend
    volumes:
      - ./volumes/formation-db/pgdata:/var/lib/postgresql/data
      - ./databases/scripts/formation_init.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready --dbname=formation_db --username=postgres"]
      interval: 15s
      timeout: 10s
      retries: 5
    profiles:
      - prod
      - dev

  formation-service:
    container_name: formation-service
    image: formation-service:latest
    build:
      context: ./formation
      dockerfile: Dockerfile
    networks:
      - backend
    depends_on:
      postgres-formation:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-formation:5432/formation_db
      - SPRING_DATASOURCE_USERNAME=${FORMATION_PG_USER}
      - SPRING_DATASOURCE_PASSWORD=${FORMATION_PG_PASSWORD}
      - S3_ENDPOINT=${S3_ENDPOINT:-http://api-gateway:8080}
      - S3_BUCKET=${S3_BUCKET:-assets}
    volumes:
      - ./formation/data:/var/formation/data
    profiles:
      - prod
      - dev

  scoring-service:
    container_name: scoring-service
    image: scoring-service:latest
    build:
      context: ./scoring
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./gophish/landing-pages:/var/gophish/landing-pages
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/authentication_db
      - SPRING_DATASOURCE_USERNAME=${AUTH_PG_USER}
      - SPRING_DATASOURCE_PASSWORD=${AUTH_PG_PASSWORD}
      - GOPHISH_API_KEY=${GOPHISH_API_KEY}
    networks:
      - backend
    profiles:
      - prod
      - dev

  spiderfoot:
    container_name: spiderfoot
    image: spiderfoot:latest
    build: https://github.com/smicallef/spiderfoot.git
    networks:
      - backend
    profiles:
      - prod

  spiderfoot-api:
    container_name: spiderfoot-api
    build:
      context: ./spiderfoot-api
      dockerfile: Dockerfile
    image: spiderfoot-api:latest
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${AUTH_PG_USER}
      POSTGRES_PASSWORD: ${AUTH_PG_PASSWORD}
      POSTGRES_DB: authentication_db
      POSTGRES_HOST: postgres
    profiles:
      - prod

  frontend:
    container_name: frontend
    image: frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_GATEWAY_URL: http://api-gateway:8080
        VITE_API_URL: http://api-gateway:8080
        VITE_API_KEY: ${GOPHISH_API_KEY}
        VITE_S3_ENDPOINT: ${S3_ENDPOINT:-http://api-gateway:8080}
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - api-gateway
    profiles:
      - prod

  s3:
    image: minio/minio:latest
    container_name: s3
    env_file:
      - .env
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
      MINIO_DEFAULT_BUCKETS: ${S3_BUCKET:-assets}
    command: server --address ':9000' /data
    volumes:
      - ./volumes/minio/data:/data
      - ./volumes/minio/config:/root/.minio
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://s3:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    profiles:
      - dev
      - s3

networks:
  backend:
    driver: bridge

volumes:
  maildata:
  mailstate:
  maillogs:
